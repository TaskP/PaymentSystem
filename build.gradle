plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'checkstyle'
	//React
	id 'org.siouan.frontend-jdk17' version '8.0.0'
}

apply plugin: "eclipse"

//React
apply plugin: 'org.siouan.frontend-jdk17'

group = 'com.example'
version = '1.0.6'

java {
	sourceCompatibility = '17'
}

springBoot {
    buildInfo()
}

tasks.named("jar") {
	manifest {
		attributes ('Main-Class': 'com.example.payment.main.web.AppWeb','Implementation-Version': version)
	}
	archiveFileName = "${project.name}-plain.jar"
}

tasks.named("bootJar") {
	manifest {
		attributes ('Implementation-Version': version)
	}
	archiveFileName = "${project.name}.jar"
}


repositories {
	mavenCentral()
	maven {
      url = uri("https://plugins.gradle.org/m2/")
    }
}

configurations.all {
	exclude group: "commons-logging", module: "commons-logging"
}

ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.2.3"

//react
frontend {
    nodeDistributionProvided = true
    cleanScript = "run clean"
    assembleScript = "run assemble"
    checkScript = "run check"
}
	
dependencies {
	
	
	implementation 'com.mysql:mysql-connector-j:8.2.0'
	implementation 'com.opencsv:opencsv:5.8'
	implementation 'org.postgresql:postgresql'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
    runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"	
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	
	runtimeOnly 'org.junit.platform:junit-platform-launcher'

}


tasks.named("bootJar") {
	mainClass = 'com.example.payment.app.main.AppWeb'
}

tasks.named("bootRun") {
	mainClass = 'com.example.payment.app.main.AppWeb'
}


checkstyle {
    configFile file("config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source ='src/main/java'
}

checkstyleTest {
    source ='src/test/java'
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }
}

tasks.named('test') {
	useJUnitPlatform()
}

task userImport(type: JavaExec){
	group = "Application"  
	description = "Import new users from CSV file. Expects CSVFile as an argument. Example: ./gradlew userImport -PCSVFile=data/users.csv"  
	systemProperty 'spring.profiles.active', 'cli'
	mainClass = "com.example.payment.app.main.AppCliUserImport"
	classpath = sourceSets.main.runtimeClasspath
	if (project.hasProperty("CSVFile")) {
		args project.getProperty("CSVFile")
	}
}

task merchantImport(type: JavaExec){
	group = "Application"  
	description = "Import merchants from CSV file. Expects CSVFile as an argument. Example: ./gradlew merchantImport -PCSVFile=data/merchants.csv"  
	systemProperty 'spring.profiles.active', 'cli'
	mainClass = "com.example.payment.app.main.AppCliMerchantImport"
	classpath = sourceSets.main.runtimeClasspath
	if (project.hasProperty("CSVFile")) {
		args project.getProperty("CSVFile")
	}
}


//EOF


